datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid()) @db.VarChar()
  email     String?   @unique @db.VarChar()
  address   String?   @unique @db.VarChar()
  password  String?   @db.VarChar()
  name      String?   @db.VarChar()
  avatar    String?   @db.VarChar()
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  companies Company[]

  @@map("users")
}

model Company {
  id            String        @id @default(cuid()) @db.VarChar()
  name          String?       @db.VarChar()
  email         String?       @db.VarChar()
  taxNumber     String?       @map("tax_number") @db.VarChar()
  phone         String?       @db.VarChar()
  line1         String?       @db.VarChar()
  city          String?       @db.VarChar()
  state         String?       @db.VarChar()
  postalCode    String?       @map("postal_code") @db.VarChar()
  country       String?       @db.VarChar()
  ownerId       String        @db.VarChar()
  owner         User          @relation(onDelete: Cascade, onUpdate: Cascade, fields: [ownerId], references: [id])
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  clients       Client[]
  invoices      Invoice[]
  addresses     Address[]
  invoice_items InvoiceItem[]
  payments      Payment[]
  paymentLinks  PaymentLink[]

  @@map("companies")
}

model Client {
  id         String    @id @default(cuid()) @db.VarChar()
  name       String    @db.VarChar()
  email      String?   @db.VarChar()
  taxNumber  String?   @map("tax_number") @db.VarChar()
  phone      String?   @db.VarChar()
  line1      String?   @db.VarChar()
  city       String?   @db.VarChar()
  state      String?   @db.VarChar()
  postalCode String?   @map("postal_code") @db.VarChar()
  country    String?   @db.VarChar()
  companyId  String    @map("company_id") @db.VarChar()
  company    Company   @relation(onDelete: Cascade, onUpdate: Cascade, fields: [companyId], references: [id])
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  invoices   Invoice[]
  payments   Payment[]

  @@map("clients")
}

model Invoice {
  id               String        @id @default(cuid()) @db.VarChar()
  number           String        @db.VarChar()
  title            String        @db.VarChar()
  notes            String?       @db.VarChar()
  status           InvoiceStatus @default(PENDING)
  netAmount        Decimal       @map("net_amount") @db.Decimal(18, 0)
  paymentAddressId String        @map("payment_ddress_id") @db.VarChar()
  paymentAddress   Address       @relation(onDelete: Cascade, onUpdate: Cascade, fields: [paymentAddressId], references: [id])
  paymentTokenId   String        @map("payment_token_id") @db.VarChar()
  paymentToken     Token         @relation(onDelete: Cascade, onUpdate: Cascade, fields: [paymentTokenId], references: [id])
  companyId        String        @map("company_id") @db.VarChar()
  company          Company       @relation(onDelete: Cascade, onUpdate: Cascade, fields: [companyId], references: [id])
  clientId         String        @map("client_id") @db.VarChar()
  client           Client        @relation(onDelete: Cascade, onUpdate: Cascade, fields: [clientId], references: [id])
  paymentId        String?       @unique @map("payment_id") @db.VarChar()
  payment          Payment?      @relation(onDelete: Cascade, onUpdate: Cascade, fields: [paymentId], references: [id])
  issuedAt         DateTime      @map("issued_at") @db.Timestamptz()
  paidAt           DateTime?     @map("paid_at") @db.Timestamptz()
  dueAt            DateTime      @map("due_at") @db.Timestamptz()
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt        DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  items            InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid()) @db.VarChar()
  description String   @db.VarChar()
  quantity    Int      @db.Integer()
  price       Decimal  @db.Decimal(18, 0)
  discount    Decimal? @db.Decimal(5, 2)
  tax         Decimal? @db.Decimal(5, 2)
  invoiceId   String   @map("invoice_id") @db.VarChar()
  invoice     Invoice  @relation(onDelete: Cascade, onUpdate: Cascade, fields: [invoiceId], references: [id])
  companyId   String   @map("company_id") @db.VarChar()
  company     Company  @relation(onDelete: Cascade, onUpdate: Cascade, fields: [companyId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("invoice_items")
}

model Address {
  id           String        @id @default(cuid()) @db.VarChar()
  address      String        @db.VarChar()
  label        String        @db.VarChar()
  companyId    String        @map("company_id") @db.VarChar()
  company      Company       @relation(onDelete: Cascade, onUpdate: Cascade, fields: [companyId], references: [id])
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  Invoice      Invoice[]
  payments     Payment[]
  paymentLinks PaymentLink[]

  @@map("addresses")
}

model Token {
  id           String        @id @default(cuid()) @db.VarChar()
  name         String?       @db.VarChar()
  address      String?       @unique @db.VarChar()
  symbol       String        @db.VarChar()
  decimals     Int           @db.Integer()
  logo         String        @db.VarChar()
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  Invoice      Invoice[]
  payments     Payment[]
  paymentLinks PaymentLink[]

  @@map("tokens")
}

model Payment {
  id            String        @id @default(cuid()) @db.VarChar()
  transactionId String?       @map("transaction_id") @db.VarChar()
  amount        Decimal       @db.Decimal(18, 0)
  reference     String?       @db.VarChar()
  source        PaymentSource
  status        PaymentStatus @default(PENDING)
  tokenId       String        @map("token_id") @db.VarChar()
  token         Token         @relation(onDelete: Cascade, onUpdate: Cascade, fields: [tokenId], references: [id])
  addressId     String        @map("address_id") @db.VarChar()
  address       Address       @relation(onDelete: Cascade, onUpdate: Cascade, fields: [addressId], references: [id])
  clientId      String?       @map("client_id") @db.VarChar()
  client        Client?       @relation(onDelete: Cascade, onUpdate: Cascade, fields: [clientId], references: [id])
  paymentLink   PaymentLink?  @relation(onDelete: Cascade, onUpdate: Cascade, fields: [paymentLinkId], references: [id])
  paymentLinkId String?       @map("payment_link_id") @db.VarChar()
  companyId     String        @map("company_id") @db.VarChar()
  company       Company       @relation(onDelete: Cascade, onUpdate: Cascade, fields: [companyId], references: [id])
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  metadata      Json?         @db.JsonB
  invoice       Invoice?

  @@map("payments")
}

model PaymentLink {
  id          String    @id @default(cuid()) @db.VarChar()
  title       String    @db.VarChar()
  description String    @db.Text
  redirectUrl String?   @map("redirect_url")
  amount      Decimal?  @db.Decimal(18, 0)
  tokenId     String    @map("token_id") @db.VarChar()
  token       Token     @relation(onDelete: Cascade, onUpdate: Cascade, fields: [tokenId], references: [id])
  addressId   String    @map("address_id") @db.VarChar()
  address     Address   @relation(onDelete: Cascade, onUpdate: Cascade, fields: [addressId], references: [id])
  companyId   String    @map("company_id") @db.VarChar()
  company     Company   @relation(onDelete: Cascade, onUpdate: Cascade, fields: [companyId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  payments    Payment[]

  @@map("payment_links")
}

enum InvoiceStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

enum PaymentSource {
  POS
  INVOICE
  LINK
}
